import os.path
import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import cv2

from src.core import ImageProcessor


class StylishImageViewerApp:
    def __init__(self, root_window):
        self.processor = ImageProcessor()

        self.report_text = None
        self.report_label = None
        self.image_placeholder = None
        self.image_frame = None
        self.select_button = None

        self.root = root_window
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è")
        self.root.geometry("800x700")
        self.root.configure(bg="#1a1a1a")  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.bg_dark = "#1a1a1a"  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω (—Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π)
        self.bg_medium = "#252525" # –¶–≤–µ—Ç –ø–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self.bg_light = "#2d2d2d"  # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ñ–æ–Ω (—Å–µ—Ä—ã–π)
        self.accent = "#800020"  # –ë–∞—Ä–¥–æ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
        self.text_light = "#ffffff"  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
        self.text_muted = "#cccccc"  # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.image_path = None
        self.image_label = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è ttk (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã)
        self.__setup_styles()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.__create_widgets()

    def __setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏
        style.configure(
            "Accent.TButton",
            foreground=self.text_light,
            background=self.accent,
            bordercolor=self.accent,
            font=('Helvetica', 10, 'bold'),
            padding=8,
            focuscolor=self.bg_light
        )
        style.map(
            "Accent.TButton",
            background=[('active', '#600018'), ('pressed', '#400010')],
            bordercolor=[('active', '#600018')]
        )

        # –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        style.configure(
            "Dark.TEntry",
            fieldbackground=self.bg_light,
            foreground=self.text_light,
            insertcolor=self.text_light,
            bordercolor=self.bg_light,
            lightcolor=self.bg_light,
            darkcolor=self.bg_light
        )

        # –°—Ç–∏–ª—å —Ñ—Ä–µ–π–º–∞
        style.configure(
            "Dark.TFrame",
            background=self.bg_dark
        )

    def __create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        main_frame = ttk.Frame(self.root, style="Dark.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —Ä–∞–º–∫–æ–π)
        self.image_frame = ttk.Frame(
            main_frame,
            style="Dark.TFrame",
            relief=tk.SOLID,
            borderwidth=1
        )
        self.image_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_placeholder = ttk.Label(
            self.image_frame,
            text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ",
            foreground=self.text_muted,
            background=self.bg_medium,
            font=('Helvetica', 12)
        )
        self.image_placeholder.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.select_button = ttk.Button(
            main_frame,
            text="–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            style="Accent.TButton",
            command=self.__open_image
        )
        self.select_button.pack(pady=(0, 15))

        # –ú–µ—Ç–∫–∞ "–û—Ç—á—ë—Ç"
        self.report_label = ttk.Label(
            main_frame,
            text="–û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ:",
            foreground=self.text_light,
            background=self.bg_dark,
            font=('Helvetica', 10, 'bold')
        )
        self.report_label.pack(anchor=tk.W, pady=(0, 5))

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞
        self.report_text = tk.Text(
            main_frame,
            height=10,
            wrap=tk.WORD,
            bg=self.bg_light,
            fg=self.text_light,
            insertbackground=self.text_light,
            selectbackground=self.accent,
            font=('Helvetica', 9),
            padx=10,
            pady=10,
            relief=tk.FLAT,
            highlightthickness=1,
            highlightcolor=self.accent,
            highlightbackground=self.bg_light,
            state="disabled"
        )
        self.report_text.pack(fill=tk.BOTH, expand=False)

    def __open_image(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png;*.jpg;*.jpeg;*.bmp;*.gif")]
        )

        if not file_path:
            return

        self.image_path = file_path

        try:
            warnings, image_with_boxes = self.__start_process(file_path)
            extension = os.path.splitext(file_path)[1]
            height = image_with_boxes.height
            width = image_with_boxes.width

            # –£–¥–∞–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.image_placeholder:
                self.image_placeholder.destroy()
                self.image_placeholder = None

            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if self.image_label:
                self.image_label.destroy()

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            max_width = self.image_frame.winfo_width() - 20
            max_height = 400
            image_with_boxes.thumbnail((max_width, max_height), Image.LANCZOS)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Tkinter
            photo = ImageTk.PhotoImage(image_with_boxes)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.image_label = ttk.Label(self.image_frame, image=photo, background=self.bg_dark)
            self.image_label.image = photo
            self.image_label.pack(pady=10, padx=10)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç
            self.report_text.config(state='normal')
            self.report_text.delete(1.0, tk.END)
            self.report_text.insert(tk.END, f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path}\n", "bold")
            self.report_text.insert(tk.END, f"üìè –†–∞–∑–º–µ—Ä: {width}x{height}\n")
            self.report_text.insert(tk.END, f"üé® –§–æ—Ä–º–∞—Ç: {extension}\n\n")
            self.report_text.insert(tk.END, "")

            if len(warnings) != 0:
                self.report_text.insert(tk.END, "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n")
                self.__show_warnings(warnings)
            else:
                self.report_text.insert(tk.END, "‚úîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            self.report_text.tag_config("bold", font=('Helvetica', 9, 'bold'))
            self.report_text.config(state='disabled')

        except Exception as e:
            self.report_text.config(state='normal')
            self.report_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n", "error")
            self.report_text.tag_config("error", foreground="#ff4444")
            self.report_text.config(state='disabled')

    def __show_warnings(self, warnings):
        for i in range(len(warnings)):
            self.report_text.insert(tk.END, f"  {i + 1}) {warnings[i]}\n")

    def __start_process(self, image_path):
        image = cv2.imread(image_path)

        warnings, image_with_boxes = self.processor(image)

        if image_with_boxes is None:
            image_with_boxes = image

        rgb_image = cv2.cvtColor(image_with_boxes, cv2.COLOR_BGR2RGB)
        rgb_image = Image.fromarray(rgb_image)

        return warnings, rgb_image


if __name__ == "__main__":
    root = tk.Tk()
    app = StylishImageViewerApp(root)
    root.mainloop()